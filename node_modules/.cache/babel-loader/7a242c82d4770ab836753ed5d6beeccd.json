{"ast":null,"code":"var _jsxFileName = \"/home/juan/Escritorio/Antiguos/movie-react/peliculas/src/components/MoviesGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport { MovieCard } from './MovieCard';\nimport styles from './MoviesGrid.module.css';\nimport React, { useEffect, useState } from \"react\";\nimport { get } from \"../utils/httpClient\";\nimport { Spinner } from './Spinner';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MoviesGrid(_ref) {\n  _s();\n\n  let {\n    search\n  } = _ref;\n  const [movies, setMovies] = useState([]); //const [isLoading, setIsLoading] = useState(true);\n\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    //setIsLoading(true);\n    const searchUrl = search ? \"/search/movie?query=\" + search + \"&page=\" + page : \"/discover/movie?page=\" + page;\n    get(searchUrl).then(data => {\n      setMovies(prevMovies => prevMovies.concat(data.results));\n      setHasMore(data.page < data.total_pages);\n      console.log(data.results); //setIsLoading(false);\n    });\n  }, [search, page]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: movies.length,\n    hasMore: hasMore,\n    next: () => setPage(prevPage => prevPage + 1),\n    loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.moviesGrid,\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n/*\n            { movies.map(function(movie){\n               return (<li> {movie.title} </li>); \n            })}\n*/\n\n_s(MoviesGrid, \"MRBCy2EgEifo7kSIG+ZAVCQXWxQ=\");\n\n_c = MoviesGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["/home/juan/Escritorio/Antiguos/movie-react/peliculas/src/components/MoviesGrid.jsx"],"names":["MovieCard","styles","React","useEffect","useState","get","Spinner","InfiniteScroll","MoviesGrid","search","movies","setMovies","page","setPage","hasMore","setHasMore","searchUrl","then","data","prevMovies","concat","results","total_pages","console","log","length","prevPage","moviesGrid","map","movie","id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAGA,OAAO,SAASC,UAAT,OAA6B;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CADgC,CAEhC;;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMa,SAAS,GAAGP,MAAM,GACtB,yBAAyBA,MAAzB,GAAkC,QAAlC,GAA6CG,IADvB,GAEtB,0BAA0BA,IAF5B;AAGAP,IAAAA,GAAG,CAACW,SAAD,CAAH,CAAeC,IAAf,CAAqBC,IAAD,IAAU;AAC1BP,MAAAA,SAAS,CAAEQ,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAkBF,IAAI,CAACG,OAAvB,CAAjB,CAAT;AACAN,MAAAA,UAAU,CAACG,IAAI,CAACN,IAAL,GAAYM,IAAI,CAACI,WAAlB,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACG,OAAjB,EAH0B,CAI1B;AACH,KALD;AAMH,GAXQ,EAWN,CAACZ,MAAD,EAASG,IAAT,CAXM,CAAT;AAcA,sBACI,QAAC,cAAD;AACI,IAAA,UAAU,EAAEF,MAAM,CAACe,MADvB;AAEI,IAAA,OAAO,EAAEX,OAFb;AAGI,IAAA,IAAI,EAAE,MAAMD,OAAO,CAAEa,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAHvB;AAII,IAAA,MAAM,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAJZ;AAAA,2BAMI;AAAI,MAAA,SAAS,EAAEzB,MAAM,CAAC0B,UAAtB;AAAA,gBACMjB,MAAM,CAACkB,GAAP,CAAYC,KAAD,iBACb,QAAE,SAAF;AAA2B,QAAA,KAAK,EAAEA;AAAlC,SAAiBA,KAAK,CAACC,EAAvB;AAAA;AAAA;AAAA;AAAA,cADE;AADN;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;AAED;AACA;AACA;AACA;AACA;;GAxCgBtB,U;;KAAAA,U","sourcesContent":["import { MovieCard } from './MovieCard';\nimport styles from './MoviesGrid.module.css'\nimport React, { useEffect, useState } from \"react\";\nimport { get } from \"../utils/httpClient\";\nimport { Spinner } from './Spinner';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nexport function MoviesGrid({search}){\n    const [movies, setMovies] = useState([]);\n    //const [isLoading, setIsLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n\n    useEffect(() => {\n        //setIsLoading(true);\n        const searchUrl = search\n        ? \"/search/movie?query=\" + search + \"&page=\" + page\n        : \"/discover/movie?page=\" + page;\n        get(searchUrl).then((data) => {\n            setMovies((prevMovies) => prevMovies.concat(data.results));\n            setHasMore(data.page < data.total_pages);\n            console.log(data.results)\n            //setIsLoading(false);\n        });\n    }, [search, page]);\n\n\n    return (\n        <InfiniteScroll\n            dataLength={movies.length}\n            hasMore={hasMore}\n            next={() => setPage((prevPage) => prevPage + 1)}\n            loader={<Spinner />}\n            >\n            <ul className={styles.moviesGrid}>\n                { movies.map((movie) => (\n                < MovieCard key={movie.id} movie={movie} />\n                ))} \n            </ul>\n        </InfiniteScroll>\n    );\n}\n\n/*\n            { movies.map(function(movie){\n               return (<li> {movie.title} </li>); \n            })}\n*/"]},"metadata":{},"sourceType":"module"}